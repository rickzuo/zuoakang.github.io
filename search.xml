<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo常用命令]]></title>
    <url>%2F2019%2F12%2F19%2Fhexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Quick Start初始化hexo目录新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 1$ hexo init [folder] 一键发布1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 在package.json中添加 npm 脚本1234&quot;scripts&quot;: &#123; &quot;deploy&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot;, &quot;start&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;&#125;, 本地调试就用 npm start ,调试完毕就发布npm run deploy Create a new post1$ hexo new "My New Post" More info: Writing Run server12$ hexo server $ hexo s Generate static files12$ hexo generate $ hexo g Deploy to remote sites12$ hexo deploy$ hexo d]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+travis实现自动化部署]]></title>
    <url>%2F2019%2F10%2F11%2Fhexo%2Btravis%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[前言 看网上很多方法，看多了都有点迷糊了，主要难点就是如何将build完成的静态代码push到username.github.id仓库，说明下我的博客把静态代码和hexo源码是放在两个仓库，静态代码放在public仓库，hexo源码放在私有仓库，需求不同，有的人是都放在public仓库，按不同分支保存，异曲同工了，主要看你的hexo有没有隐私的东西，没有就都放public仓库把。回到正题，更新静态代码的方法大致两种 方法一：在.travis.yml文件中配置，after_script脚本，cd到pulic文件夹（已经build完成）,git push –force xxx/username.github.id 方法二：使用hexo自带的push到xxx/username.github.id，只需要在.travis.yml文件中配置修改_config.yml中deploy-&gt;repo中到地址（本项目用的是这个方法） 步骤 申请开通https://travis-ci.org 或者https://travis-ci.com，区别是org免费支持公开仓库，com支持私有仓库 生成具有写权限的私有token，https://github.com/settings/tokens ，目的是travis能够往xxx/username.github.id仓库更新代码，（也可以生成deloy key，这个没有试过，大概就是在travis找到ssh key，把这个key添加到username.github.id仓库中到deploy key中） 添加.travis.yml文件 申请开通生成部署key添加.travis.yml文件 方法一:yml文件配置 12345678910111213141516171819202122232425262728293031323334language: node_jsnode_js: stable# Travis-CI Cachingcache: directories: - node_modules# S: Build Lifecycleinstall: - npm installbefore_script: # - npm install -g gulpscript: - hexo gafter_script: - cd ./public - git init - git config --global user.name "uesrname" - git config --global user.email "username@gmail.com" - git add . - git commit -m "Travis auto update docs" - git push --force --quiet "https://$&#123;ACCESS_TOKEN&#125;@$&#123;GH_REF&#125;" master:master# E: Build LifeCyclebranches: only: - hexoenv: global: - GH_REF: github.com/uesrname/uesrname.github.io.git 方法二：yml文件配置 12345678910111213141516171819language: node_jsnode_js: - '10'branches: only: - masterbefore_install:- git config --global user.name "github username"- git config --global user.email "username@gmail.com"- sed -i'' "s~https://github.com/username/username.github.io.git~https://$&#123;ACCESS_TOKEN&#125;@github.com/username/username.github.io.git~" _config.ymlinstall:- npm install hexo-cli -g- npm installscript:- npm run deploy 参考链接 https://alongwy.top/blog/2017/08/16/hexo-github/ https://g2ex.top/2019/06/28/hexo-with-travis-ci/ https://xirikm.net/2019/826-2]]></content>
      <categories>
        <category>hexo</category>
        <category>travis</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>travis</tag>
        <tag>自动化</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常规配置]]></title>
    <url>%2F2019%2F08%2F27%2Fhexo%E5%B8%B8%E8%A7%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[使用 LocalSearch 搜索功能安装 hexo-generator-searchdb1npm install hexo-generator-searchdb --save 配置博客 butterfly主题 _config.yml 文件12345local_search: enable: true labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" # if there are no result 添加字数统计安装 hexo-wordcount1npm install hexo-wordcount --save 配置butterfly.yml12wordcount: enable: true]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>search</tag>
        <tag>word count</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何搭建hexo gitalk评论]]></title>
    <url>%2F2019%2F08%2F24%2F%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E8%AF%84%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[配置github首先转到github.com/settings/applications/new创建一个应用填写内容如下： 1234Application 应用名称Homepage URL 博客地址Application description 应用描述Authorization callback URL 自己使用gitalk的博客地址 查看自己的配置好的应用列表https://github.com/settings/developers创建好，得到Client ID和Client Secret ，这两个待会会用到。 配置Butterfly主题中的gitalk 打开博客项目下的themes/Butterfly/_config.yml,修改以下内容将gitalk enable 设置为true 12345678910111213141516171819202122232425# Comments System# ---------------disqus: enable: false shortname: # laibili: # enable: false # uid:# gitment # enable: false # owner: # repo: # client_id: # client_secret: gitalk: enable: true client_id: 填写上面生成的client_id client_secret: 填写上面生成的client_secret repo: xxxx.github.io github仓库名称 owner: xxxx #这个项目名的拥有者（GitHub账号或组织） admin: xxxx #具有该库写权限的用户，一般都你的用户名了]]></content>
      <categories>
        <category>hexo</category>
        <category>gitake</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitake</tag>
        <tag>Butterfly</tag>
      </tags>
  </entry>
</search>
